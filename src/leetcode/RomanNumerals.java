package leetcode;

/**
 * Римские цифры представлены семью различными символами: I, V, X, L, C, D, M
 *
 * Символ        Значение
 * I             1
 * V             5
 * X             10
 * L             50
 * C             100
 * D             500
 * M             1000
 *
 * Например, 2пишется как II римскими цифрами, просто две сложенные вместе. 12пишется как  XII, что просто X + II.
 * Число 27записывается как XXVII, то есть XX + V + II.
 *
 * Римские цифры обычно пишутся слева направо от большего к меньшему. Однако цифра «четыре» — не IIII.
 * Вместо этого цифра четыре записывается как IV. Так как единица предшествует пятерке, мы вычитаем ее и получаем четыре.
 * Тот же принцип применим к числу девять, которое записывается как IX. Есть шесть случаев, когда используется вычитание:
 *
 * I можно поставить перед V(5) и X(10), чтобы получилось 4 и 9.
 * X можно поставить перед L(50) и C(100), чтобы получилось 40 и 90.
 * C можно поставить перед D(500) и M(1000), чтобы получить 400 и 900.
 * Дана Римская цифра, преобразовать ее в целое число.
 *
 *
 *
 * Пример 1:
 *
 * Ввод: s = "III"
 *  Вывод: 3
 *  Объяснение: III = 3.
 * Пример 2:
 *
 * Вход: s = "LVIII"
 *  Выход: 58
 *  Объяснение: L = 50, V = 5, III = 3.
 * Пример 3:
 *
 * Ввод: s = "MCMXCIV"
 *  Вывод: 1994
 *  Объяснение: M = 1000, CM = 900, XC = 90 и IV = 4.
 *
 *
 * Ограничения:
 *
 * 1 <= s.length <= 15
 * s содержит только символы ('I', 'V', 'X', 'L', 'C', 'D', 'M').
 * Гарантируется, что s это допустимая римская цифра в диапазоне [1, 3999].
 */

public class RomanNumerals {
    public static void main(String[] args) {
        String romanNumeral = "MCMXCIV";
        int arabicNumeral = romanToInt(romanNumeral);
        System.out.println(arabicNumeral);
    }

    private static int romanValue(char rValue) { // Объявление метода romanValue, который принимает один символ "c" в качестве параметра и возвращает целочисленное значение.
        switch (rValue) {
            case 'I':
                return 1;
            case 'V':
                return 5;
            case 'X':
                return 10;
            case 'L':
                return 50;
            case 'C':
                return 100;
            case 'D':
                return 500;
            case 'M':
                return 1000;
            default:
                return 0;
        }
    }

    public static int romanToInt(String s) { // метод, который принимает строку римских цифр и возвращает ее целое число.
        int result = 0; // будет содержать результирующее целое число.
        int prev = 0; //  будет использоваться для хранения предыдущего значения римской цифры при переборе строки в обратном порядке.
        for (int i = s.length() - 1; i >= 0; i--) { // for который перебирает строку s в обратном порядке.
            int current = romanValue(s.charAt(i)); // Это объявление переменной current, которая получает числовое значение текущего символа римской цифры, используя метод romanValue().
            if (current == 0) { // Если метод romanValue() возвращает 0 для текущего символа, значит символ не является допустимой римской цифрой, поэтому метод romanToInteger() сразу возвращает 0.
                return 0; // входная строка содержит неверный символ
            }
            if (current < prev) { // Этот условный оператор проверяет, является ли текущее значение меньше предыдущего значения.
                result -= current; // Если да, то это означает, что текущая цифра представляет вычитаемое значение (например, IV должно быть вычтено из result, чтобы получить 4).
            } else {
                result += current; //В противном случае текущая цифра представляет добавляемое значение.
            }
            prev = current; // Значение prev устанавливается на current, чтобы при следующей итерации можно было проверить, является ли текущее значение меньше предыдущего.
        }
        return result;
    }
}
